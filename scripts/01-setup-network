#!/bin/bash

set -Eeuo pipefail
source "${0%/*}/functions.sh"

print_header "01 - NETWORKING SETUP"

if [ -z "${DL_BRIDGE_NAME:-}" ]; then
	die "DL_BRIDGE_NAME is not set"
elif [ -z "${DL_BRIDGE_ADDRESS:-}" ]; then
	die "DL_BRIDGE_ADDRESS is not set"
elif [ -z "${DL_BRIDGE_PREFIX:-}" ]; then
	die "DL_BRIDGE_PREFIX is not set"
elif [ -z "${DL_BRIDGE_PREFIX_LEN:-}" ]; then
	die "DL_BRIDGE_PREFIX_LEN is not set"
fi

DL_BRIDGE_CIDR="${DL_BRIDGE_ADDRESS}/${DL_BRIDGE_PREFIX_LEN}"
DL_BRIDGE_NET_CIDR="${DL_BRIDGE_PREFIX}/${DL_BRIDGE_PREFIX_LEN}"

if ! ip link show "${DL_BRIDGE_NAME}" > /dev/null 2>&1; then
	print_changed "Creating bridge device ${DL_BRIDGE_NAME}"
	sudo ip link add "${DL_BRIDGE_NAME}" type bridge
else
	print_ok "Bridge device ${DL_BRIDGE_NAME} already exists"
fi

if ! ip -4 -o addr show "${DL_BRIDGE_NAME}" | awk '{print $4}' | \
	grep -q "^${DL_BRIDGE_CIDR}$"; then
	print_changed "Setting address on bridge device ${DL_BRIDGE_NAME} to ${DL_BRIDGE_CIDR}"
	sudo ip addr add "${DL_BRIDGE_CIDR}" dev "${DL_BRIDGE_NAME}" > /dev/null 2>&1 || true
else
	print_ok "Bridge device ${DL_BRIDGE_NAME} already has address ${DL_BRIDGE_CIDR}"
fi

# Note: bringing up a bridge when none of the tap devices are in use is a noop
# shellcheck disable=SC1003
if [ "$(ip -o link show "${DL_BRIDGE_NAME}" | cut -d'\' -f1 | \
	awk '{for (i=4; i<=NF; i+=2) print $i, $(i+1)}' | \
	sed -e '/^qlen 10000$/p;d' | wc -l)" != "1" ]; then
	print_changed "Setting queue length for bridge device ${DL_BRIDGE_NAME}"
	sudo ip link set "${DL_BRIDGE_NAME}" qlen 10000
else
	print_ok "Bridge device ${DL_BRIDGE_NAME} queue length is already set"
fi

if ! sudo iptables -t nat -C POSTROUTING		\
	  -s "${DL_BRIDGE_NET_CIDR}"			\
	! -d "${DL_BRIDGE_NET_CIDR}"			\
	  -m comment --comment="debops-lab"		\
	  -j MASQUERADE > /dev/null 2>&1; then
	print_changed "Adding firewall masquerade rule for bridge network egress"
	sudo iptables -t nat -A POSTROUTING		\
		  -s "${DL_BRIDGE_NET_CIDR}"		\
		! -d "${DL_BRIDGE_NET_CIDR}"		\
		  -m comment --comment="debops-lab"	\
		  -j MASQUERADE
else
	print_ok "Firewall masquerade rule for bridge network egress already exists"
fi

if ! sudo iptables -t filter -C FORWARD			\
	  -i "${DL_BRIDGE_NAME}"			\
	! -o "${DL_BRIDGE_NAME}"			\
	  -s "${DL_BRIDGE_NET_CIDR}"			\
	! -d "${DL_BRIDGE_NET_CIDR}"			\
	  -m comment --comment="debops-lab"		\
	  -j ACCEPT > /dev/null 2>&1; then
	print_changed "Adding firewall forwarding rule for bridge network egress"
	sudo iptables -t filter -I FORWARD 1		\
		  -i "${DL_BRIDGE_NAME}"		\
		! -o "${DL_BRIDGE_NAME}"		\
		  -s "${DL_BRIDGE_NET_CIDR}"		\
		! -d "${DL_BRIDGE_NET_CIDR}"		\
		  -m comment --comment="debops-lab"	\
		  -j ACCEPT
else
	print_ok "Firewall forwarding rule for bridge network egress already exists"
fi

function add_tap {
	local TAPDEV="${1}"

	if ! ip link show "${TAPDEV}" > /dev/null 2>&1; then
		print_changed "Adding network device ${TAPDEV}"
		sudo ip tuntap add dev "${TAPDEV}" mode tap user "${USER}"
	else
		print_ok "Network device ${TAPDEV} already exists"
	fi
	sudo ip link set "${TAPDEV}" master "${DL_BRIDGE_NAME}"
	sudo ip link set "${TAPDEV}" up qlen 10000
}

add_tap tap1
add_tap tap2
add_tap tap3
add_tap tap253

if ! sudo ip link set "${DL_BRIDGE_NAME}" up; then
	die "Failed to bring up netdev ${DL_BRIDGE_NAME}"
fi

if [ ! -r "/proc/sys/net/ipv4/ip_forward" ]; then
	die "Can't find cat /proc/sys/net/ipv4/ip_forward"
elif [ "$(cat /proc/sys/net/ipv4/ip_forward)" = "1" ]; then
	print_ok "IPv4 forwarding already enabled"
else
	print_changed "Enabling IPv4 forwarding"
	sudo sh -c 'echo 1 >> /proc/sys/net/ipv4/ip_forward'
fi

finished
